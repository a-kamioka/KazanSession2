@page "/"

@using KazanSession2.Shared.Models
@using System.Text.Json
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient Http
@inject NavigationManager Nav
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>Login</PageTitle>

<div class="text-center vh-100 d-flex align-items-center">
    <div class="form-signin">
        <EditForm Model="@_employee" class="mb-5">
            <h1 class="h3 mb-3 fw-normal">Sign in to EM management</h1>
            <div class="form-floating mb-3">
                <InputText id="username" class="form-control" placeholder="Username" @bind-Value="_employee.Username"></InputText>
                <label for="username">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText id="password" class="form-control" type="password" placeholder="Password" @bind-Value="_employee.Password"></InputText>
                <label for="password">Password</label>
            </div>
            <button class="w-100 btn btn-lg btn-primary" type="submit" disabled="@_loading" @onclick="OnLogin">
                Sign in
                @if (_loading)
                {
                    <span>...</span>
                }
            </button>
        </EditForm>
        @if (_authFailed)
        {
            <p class="text-danger">Login failed.</p>
        }
    </div>
</div>

@code {
    const string apiUrl = "api/login";

    Employee _employee = new Employee(){ FirstName = "", LastName = "", Phone = "", IsAdmin = null };
    private bool _authFailed = false;
    bool _loading = false;

    private async void OnLogin()
    {
        _loading = true;
        HttpResponseMessage response = await Http.PostAsJsonAsync<Employee>(apiUrl, _employee);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Employee employee = await response.Content.ReadFromJsonAsync<Employee>();
            await sessionStorage.SetItemAsStringAsync("token", employee.Password);
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", employee.Password);
            if (employee.IsAdmin != null)
            {
                Nav.NavigateTo($"/manager", false);
            }
            else
            {
                //var _queryParams = new Dictionary<string, string>
                //{
                //    ["id"] = _employee.Id.ToString()
                //};
                //Nav.NavigateTo(QueryHelpers.AddQueryString("/party", _queryParams), false);
                Nav.NavigateTo($"/party", false);
            }
        }
        else
        {
            _authFailed = true;
            _loading = false;
            StateHasChanged();
        }
    }
}
